<?php
header("Content-Type: application/json");
include_once __DIR__ . '/../db_config.php';
include_once __DIR__ . '/log_api.php';

// Enable error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Request handling
$method = $_SERVER['REQUEST_METHOD'];
$ip_address = $_SERVER['REMOTE_ADDR'] ?? null;
$user_agent = $_SERVER['HTTP_USER_AGENT'] ?? null;

// Enhanced response helper function
function sendResponse($status, $message, $data = null, $httpCode = 200) {
    http_response_code($httpCode);
    try {
        $response = [
            'status' => $status,
            'message' => $message,
            'data' => $data
        ];
        echo json_encode($response, JSON_THROW_ON_ERROR | JSON_UNESCAPED_UNICODE);
    } catch (JsonException $e) {
        // Fallback response if JSON encoding fails
        http_response_code(500);
        header('Content-Type: text/plain');
        die("Error encoding response: " . $e->getMessage());
    }
    exit;
}

// Validate shift time format (HH:MM:SS)
function isValidTime($time) {
    return preg_match('/^([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/', $time);
}

// CREATE shift (updated for trigger-generated shift_id)
function createShift($conn, $ip_address, $user_agent) {
    $input = json_decode(file_get_contents("php://input"), true);

    // Validate required fields
    $required = ['shift_name', 'shift_start_time', 'shift_end_time'];
    foreach ($required as $field) {
        if (empty($input[$field])) {
            logUserAction(null, 'System', 'Create Shift', "Missing required field: $field", 
                        $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                        $input, 'error', null, $ip_address, $user_agent);
            sendResponse('error', "$field is required", null, 400);
        }
    }

    // Validate time formats
    if (!isValidTime($input['shift_start_time']) || !isValidTime($input['shift_end_time'])) {
        logUserAction(null, 'System', 'Create Shift', "Invalid time format", 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'error', null, $ip_address, $user_agent);
        sendResponse('error', "Time must be in HH:MM:SS format", null, 400);
    }

    try {
        // Insert into database (shift_id will be auto-generated by trigger)
        $sql = "INSERT INTO shift (shift_name, shift_start_time, shift_end_time) 
                VALUES (?, ?, ?)";
        $stmt = $conn->prepare($sql);
        
        if (!$stmt) {
            throw new Exception('Database preparation failed: ' . $conn->error);
        }

        $stmt->bind_param("sss", 
            $input['shift_name'],
            $input['shift_start_time'],
            $input['shift_end_time']
        );

        if (!$stmt->execute()) {
            throw new Exception('Failed to create shift: ' . $stmt->error);
        }

        // Since shift_id is generated by trigger, we need to fetch the last inserted record
        // This assumes your trigger populates shift_id uniquely
        $get_sql = "SELECT * FROM shift 
                    WHERE shift_name = ? 
                    AND shift_start_time = ? 
                    AND shift_end_time = ?
                    ORDER BY shift_id DESC 
                    LIMIT 1";
        $get_stmt = $conn->prepare($get_sql);
        
        if (!$get_stmt) {
            throw new Exception('Retrieval preparation failed: ' . $conn->error);
        }

        $get_stmt->bind_param("sss", 
            $input['shift_name'],
            $input['shift_start_time'],
            $input['shift_end_time']
        );

        if (!$get_stmt->execute()) {
            throw new Exception('Failed to retrieve created shift: ' . $get_stmt->error);
        }

        $result = $get_stmt->get_result();
        $shift = $result->fetch_assoc();

        if (!$shift) {
            throw new Exception('Failed to retrieve created shift - no matching record found');
        }

        logUserAction(null, 'System', 'Create Shift', 'Shift created successfully', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'success', $shift, $ip_address, $user_agent);
        sendResponse('success', 'Shift created', $shift, 201);

    } catch (Exception $e) {
        logUserAction(null, 'System', 'Create Shift', 'Shift creation failed', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'error', ['error' => $e->getMessage()], $ip_address, $user_agent);
        sendResponse('error', $e->getMessage(), null, 500);
    }
}


// READ all shifts
function listShifts($conn, $ip_address, $user_agent) {
    try {
        $sql = "SELECT * FROM shift ORDER BY shift_start_time";
        $result = $conn->query($sql);
        
        if (!$result) {
            throw new Exception('Database error: ' . $conn->error);
        }

        $shifts = [];
        while ($row = $result->fetch_assoc()) {
            // Ensure all fields are properly formatted
            $row['shift_id'] = (string)$row['shift_id']; // Convert to string if needed
            $shifts[] = $row;
        }

        logUserAction(null, 'System', 'List Shifts', 'Shifts retrieved successfully', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    null, 'success', ['count' => count($shifts)], $ip_address, $user_agent);
        sendResponse('success', 'Shifts retrieved', $shifts);

    } catch (Exception $e) {
        logUserAction(null, 'System', 'List Shifts', 'Failed to retrieve shifts', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    null, 'error', ['error' => $e->getMessage()], $ip_address, $user_agent);
        sendResponse('error', $e->getMessage(), null, 500);
    }
}

// READ single shift
function getShift($conn, $ip_address, $user_agent) {
    $shift_id = $_GET['shift_id'] ?? null;
    
    if (!$shift_id) {
        logUserAction(null, 'System', 'Get Shift', 'Missing shift_id parameter', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $_GET, 'error', null, $ip_address, $user_agent);
        sendResponse('error', 'shift_id parameter is required', null, 400);
    }

    try {
        $sql = "SELECT * FROM shift WHERE shift_id = ?";
        $stmt = $conn->prepare($sql);
        
        if (!$stmt) {
            throw new Exception('Database preparation failed: ' . $conn->error);
        }

        $stmt->bind_param("s", $shift_id);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows === 0) {
            logUserAction(null, 'System', 'Get Shift', 'Shift not found', 
                        $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                        $_GET, 'error', ['shift_id' => $shift_id], $ip_address, $user_agent);
            sendResponse('error', 'Shift not found', null, 404);
            return;
        }

        $shift = $result->fetch_assoc();
        // Ensure shift_id is properly formatted
        $shift['shift_id'] = (string)$shift['shift_id'];
        
        logUserAction(null, 'System', 'Get Shift', 'Shift retrieved successfully', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $_GET, 'success', $shift, $ip_address, $user_agent);
        sendResponse('success', 'Shift retrieved', $shift);

    } catch (Exception $e) {
        logUserAction(null, 'System', 'Get Shift', 'Failed to retrieve shift', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $_GET, 'error', ['error' => $e->getMessage()], $ip_address, $user_agent);
        sendResponse('error', $e->getMessage(), null, 500);
    }
}

// UPDATE shift
function updateShift($conn, $ip_address, $user_agent) {
    $input = json_decode(file_get_contents("php://input"), true);

    if (empty($input['shift_id'])) {
        logUserAction(null, 'System', 'Update Shift', 'Missing shift_id', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'error', null, $ip_address, $user_agent);
        sendResponse('error', 'shift_id is required', null, 400);
    }

    try {
        // Build dynamic update query
        $updates = [];
        $params = [];
        $types = "";

        // Validate and prepare fields for update
        if (isset($input['shift_name'])) {
            $updates[] = "shift_name = ?";
            $params[] = $input['shift_name'];
            $types .= "s";
        }

        if (isset($input['shift_start_time'])) {
            if (!isValidTime($input['shift_start_time'])) {
                throw new Exception("shift_start_time must be in HH:MM:SS format");
            }
            $updates[] = "shift_start_time = ?";
            $params[] = $input['shift_start_time'];
            $types .= "s";
        }

        if (isset($input['shift_end_time'])) {
            if (!isValidTime($input['shift_end_time'])) {
                throw new Exception("shift_end_time must be in HH:MM:SS format");
            }
            $updates[] = "shift_end_time = ?";
            $params[] = $input['shift_end_time'];
            $types .= "s";
        }

        if (empty($updates)) {
            throw new Exception('No valid fields to update');
        }

        // Add shift_id to params
        $params[] = $input['shift_id'];
        $types .= "s";

        $sql = "UPDATE shift SET " . implode(", ", $updates) . " WHERE shift_id = ?";
        $stmt = $conn->prepare($sql);
        
        if (!$stmt) {
            throw new Exception('Database preparation failed: ' . $conn->error);
        }

        $stmt->bind_param($types, ...$params);

        if (!$stmt->execute()) {
            throw new Exception('Update failed: ' . $stmt->error);
        }

        if ($stmt->affected_rows === 0) {
            throw new Exception('No changes made or shift not found');
        }

        // Get the updated shift
        $get_sql = "SELECT * FROM shift WHERE shift_id = ?";
        $get_stmt = $conn->prepare($get_sql);
        $get_stmt->bind_param("s", $input['shift_id']);
        $get_stmt->execute();
        $result = $get_stmt->get_result();
        $shift = $result->fetch_assoc();

        logUserAction(null, 'System', 'Update Shift', 'Shift updated successfully', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'success', $shift, $ip_address, $user_agent);
        sendResponse('success', 'Shift updated', $shift);

    } catch (Exception $e) {
        logUserAction(null, 'System', 'Update Shift', 'Shift update failed', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'error', ['error' => $e->getMessage()], $ip_address, $user_agent);
        sendResponse('error', $e->getMessage(), null, 500);
    }
}

// DELETE shift
function deleteShift($conn, $ip_address, $user_agent) {
    $input = json_decode(file_get_contents("php://input"), true);

    if (empty($input['shift_id'])) {
        logUserAction(null, 'System', 'Delete Shift', 'Missing shift_id', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'error', null, $ip_address, $user_agent);
        sendResponse('error', 'shift_id is required', null, 400);
    }

    try {
        // First get the shift to be deleted for logging
        $get_sql = "SELECT * FROM shift WHERE shift_id = ?";
        $get_stmt = $conn->prepare($get_sql);
        $get_stmt->bind_param("s", $input['shift_id']);
        $get_stmt->execute();
        $result = $get_stmt->get_result();
        $shift = $result->fetch_assoc();

        if (!$shift) {
            throw new Exception('Shift not found');
        }

        // Delete the shift
        $del_sql = "DELETE FROM shift WHERE shift_id = ?";
        $del_stmt = $conn->prepare($del_sql);
        $del_stmt->bind_param("s", $input['shift_id']);

        if (!$del_stmt->execute()) {
            throw new Exception('Deletion failed: ' . $del_stmt->error);
        }

        if ($del_stmt->affected_rows === 0) {
            throw new Exception('No shift deleted (shift not found)');
        }

        logUserAction(null, 'System', 'Delete Shift', 'Shift deleted successfully', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'success', $shift, $ip_address, $user_agent);
        sendResponse('success', 'Shift deleted', ['shift_id' => $input['shift_id']]);

    } catch (Exception $e) {
        logUserAction(null, 'System', 'Delete Shift', 'Shift deletion failed', 
                    $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], 
                    $input, 'error', ['error' => $e->getMessage()], $ip_address, $user_agent);
        sendResponse('error', $e->getMessage(), null, 500);
    }
}

// Route requests
try {
    switch ($method) {
        case 'POST': 
            createShift($conn, $ip_address, $user_agent); 
            break;
        case 'GET':
            isset($_GET['shift_id']) ? getShift($conn, $ip_address, $user_agent) : 
            listShifts($conn, $ip_address, $user_agent);
            break;
        case 'PUT': 
            updateShift($conn, $ip_address, $user_agent); 
            break;
        case 'DELETE': 
            deleteShift($conn, $ip_address, $user_agent); 
            break;
        default:
            logUserAction(null, 'System', 'Invalid Method', 'Invalid request method', 
                        $_SERVER['REQUEST_URI'], $method, null, 'error', null, $ip_address, $user_agent);
            sendResponse('error', 'Invalid request method', null, 405);
            break;
    }
} catch (Exception $e) {
    logUserAction(null, 'System', 'API Error', 'Unhandled exception', 
                $_SERVER['REQUEST_URI'], $method, null, 'error', 
                ['error' => $e->getMessage()], $ip_address, $user_agent);
    sendResponse('error', 'Internal server error: ' . $e->getMessage(), null, 500);
}

$conn->close();
?>